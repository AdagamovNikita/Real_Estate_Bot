# main.py
import time
import json
import sys
import traceback
from telegram_fetcher import fetch_messages
from llm_extractor import process_messages
from db_writer import save_to_db, get_existing_message_ids
from config import RAW_MESSAGES_FILE, PARSED_MESSAGES_FILE
import os
import shutil

BATCH_SIZE = 50  # –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM

def load_existing_results():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(PARSED_MESSAGES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if data:
                last_id = data[-1]['message_id']
                print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π message_id: {last_id}")
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def filter_new_messages(all_messages, existing_ids):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∏–¥—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ"""
    if not existing_ids:
        return all_messages
        
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    max_existing_id = max(existing_ids)
    return [msg for msg in all_messages if msg['message_id'] > max_existing_id]

def save_results_safely(results, filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞"""
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(filename):
        backup_name = filename + '.backup'
        shutil.copy2(filename, backup_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = filename + '.temp'
    with open(temp_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    os.replace(temp_file, filename)

def process_messages_in_batches(messages):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results = load_existing_results()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
    processed_ids = {msg['message_id'] for msg in all_results}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    messages = filter_new_messages(messages, processed_ids)
    
    total_messages = len(messages)
    if total_messages == 0:
        print("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return all_results
        
    print(f"üìù –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    for i in range(0, total_messages, BATCH_SIZE):
        batch = messages[i:i + BATCH_SIZE]
        current_batch = i//BATCH_SIZE + 1
        total_batches = (total_messages + BATCH_SIZE - 1)//BATCH_SIZE
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ü–∏–∏ {current_batch} –∏–∑ {total_batches}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(RAW_MESSAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(batch, f, ensure_ascii=False, indent=2)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏—é
        try:
            results = process_messages()
            all_results.extend(results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Ä—Ü–∏–∏
            with open(PARSED_MESSAGES_FILE, 'w', encoding='utf-8') as f:
                json.dump(all_results, f, ensure_ascii=False, indent=2)
                
            print(f"‚úÖ –ü–æ—Ä—Ü–∏—è {current_batch}/{total_batches} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {min(i + BATCH_SIZE, total_messages)}/{total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ä—Ü–∏–∏ {current_batch}/{total_batches}: {str(e)}")
            traceback.print_exc()
            continue
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
    
    return all_results

def main():
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram...")
            all_messages = fetch_messages(limit=5000)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram: {str(e)}")
            traceback.print_exc()
            return

        try:
            existing_ids = get_existing_message_ids()
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_ids)} ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID: {str(e)}")
            traceback.print_exc()
            return

        new_messages = filter_new_messages(all_messages, existing_ids)

        if new_messages:
            print(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            print("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            results = process_messages_in_batches(new_messages)
            
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            try:
                save_to_db()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                traceback.print_exc()
                return

            print("\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üì≠ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
        return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc() 