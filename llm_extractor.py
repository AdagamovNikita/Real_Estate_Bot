# llm_extractor.py
import requests
import json
import re
import time
import sys
from config import API_KEY, LLM_URL, LLM_MODEL, RAW_MESSAGES_FILE, PARSED_MESSAGES_FILE

def print_flush(*args, **kwargs):
    """–ü–µ—á–∞—Ç—å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –±—É—Ñ–µ—Ä–∞"""
    print(*args, **kwargs)
    sys.stdout.flush()

def extract_json_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ"""
    json_pattern = r'\{[^{}]*\}'
    match = re.search(json_pattern, text)
    if match:
        try:
            return json.loads(match.group())
        except json.JSONDecodeError:
            return None
    return None

def call_llm(message_text, max_retries=3, delay=2):
    """–í—ã–∑–æ–≤ LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    prompt = (
        "–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. "
        "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: "
        '{"location": "–≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω", "price": "—Ü–µ–Ω–∞", "deal_type": "–∞—Ä–µ–Ω–¥–∞/–ø—Ä–æ–¥–∞–∂–∞", "rooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç"}. '
        f"–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {message_text}"
    )
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": LLM_MODEL,
        "messages": [{"role": "user", "content": prompt}]
    }

    for attempt in range(max_retries):
        try:
            response = requests.post(LLM_URL, headers=headers, json=data)
            response.raise_for_status()

            content = response.json()['choices'][0]['message']['content']
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            result = extract_json_from_text(content)
            if not result:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM")
                
            return result
        except requests.exceptions.RequestException as e:
            if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                raise
            print_flush(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

def process_messages(start_from_message_id=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ ID"""
    print_flush("\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞...")
    with open(RAW_MESSAGES_FILE, encoding='utf-8') as f:
        messages = json.load(f)
    print_flush(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        with open(PARSED_MESSAGES_FILE, encoding='utf-8') as f:
            results = json.load(f)
            print_flush(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(results)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    except (FileNotFoundError, json.JSONDecodeError):
        results = []
        print_flush("üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –Ω—É–ª—è")

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö message_id
    processed_ids = {msg['message_id'] for msg in results}
    total_to_process = len([msg for msg in messages if msg['message_id'] not in processed_ids])
    print_flush(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {total_to_process} —Å–æ–æ–±—â–µ–Ω–∏–π")

    processed_count = 0
    for msg in messages:
        if msg['message_id'] in processed_ids:
            continue

        try:
            print_flush(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {msg['message_id']} ({processed_count + 1}/{total_to_process})")
            time.sleep(1)  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            structured = call_llm(msg['text'])
            structured['message_id'] = msg['message_id']
            results.append(structured)
            
            # –î–æ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            with open(PARSED_MESSAGES_FILE, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
                
            processed_count += 1
            print_flush(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg['message_id']} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print_flush(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_count}/{total_to_process} ({(processed_count/total_to_process*100):.1f}%)")
            
        except Exception as e:
            print_flush(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg['message_id']}: {str(e)}")
            continue

    print_flush(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    return results 

if __name__ == '__main__':
    print_flush("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    process_messages() 