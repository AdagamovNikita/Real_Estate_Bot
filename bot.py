import logging
import sqlite3
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from telegram.error import BadRequest

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ config.py, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
try:
    from config import TELEGRAM_BOT_TOKEN
    TOKEN = TELEGRAM_BOT_TOKEN
except ImportError:
    TOKEN = "7555815142:AAHy-gudCxhKIs07RyEc8esG9qHOcLm8EbA"

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# States for conversation
DEAL_TYPE, LOCATION, BUDGET, ROOMS, SEARCH_RESULTS = range(5)

# User data keys
DEAL = 'deal_type'
LOC = 'location'
BUD = 'budget'
RMS = 'rooms'
RESULTS = 'search_results'
PAGE = 'current_page'

# Configuration
ITEMS_PER_PAGE = 10
BIG_CITIES = ['–ª–∏–º–∞—Å—Å–æ–ª', '–ø–∞—Ñ–æ—Å', '–ª–∞—Ä–Ω–∞–∫–∞', 'limassol', 'paphos', 'larnaca']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the conversation and asks the user about the deal type."""
    context.user_data.clear()  # Clear any previous data
    
    keyboard = [
        [InlineKeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞", callback_data='rent')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ö–∏–ø—Ä–µ.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:',
        reply_markup=reply_markup
    )
    return DEAL_TYPE

async def deal_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the selected deal type and asks for location."""
    query = update.callback_query
    await query.answer()
    
    context.user_data[DEAL] = query.data
    
    await query.edit_message_text(
        text="–í—ã–±—Ä–∞–Ω–∞ –∞—Ä–µ–Ω–¥–∞ ‚úÖ\n\n"
             "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∏–º–∞—Å—Å–æ–ª, –ü–∞—Ñ–æ—Å, –õ–∞—Ä–Ω–∞–∫–∞, –ê–π—è-–ù–∞–ø–∞):"
    )
    return LOCATION

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the location and asks for budget."""
    context.user_data[LOC] = update.message.text.strip()
    
    await update.message.reply_text(
        f"–ì–æ—Ä–æ–¥: {update.message.text} ‚úÖ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ EUR (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):"
    )
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the budget and asks for number of rooms."""
    try:
        budget_value = int(update.message.text.strip())
        context.user_data[BUD] = budget_value
        
        await update.message.reply_text(
            f"–ë—é–¥–∂–µ—Ç: –¥–æ {budget_value} EUR ‚úÖ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2) –∏–ª–∏ 0 –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:"
        )
        return ROOMS
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞:"
        )
        return BUDGET

async def rooms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the number of rooms and performs the search."""
    try:
        rooms_value = int(update.message.text.strip())
        context.user_data[RMS] = rooms_value
        
        await update.message.reply_text(
            f"–ö–æ–º–Ω–∞—Ç: {rooms_value if rooms_value > 0 else '–ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'} ‚úÖ\n\n"
            "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã..."
        )
        
        return await process_search(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç:"
        )
        return ROOMS

async def process_search(update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import os
        if not os.path.exists('ads.db'):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
            
        conn = sqlite3.connect('ads.db')
        cursor = conn.cursor()
        cursor.row_factory = sqlite3.Row
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ads
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='ads'")
        if not cursor.fetchone():
            conn.close()
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ ads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        location_input = context.user_data.get(LOC, '').lower()
        budget = context.user_data.get(BUD, 0)
        rooms = context.user_data.get(RMS, 0)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
        city_mapping = {
            '–ª–∏–º–∞—Å—Å–æ–ª': ['–ª–∏–º–∞—Å—Å–æ–ª', 'limassol', '–ª–∏–º–∞—Å–æ–ª', 'limmasol'],
            '–ø–∞—Ñ–æ—Å': ['–ø–∞—Ñ–æ—Å', 'paphos', '–ø–∞—Ñ–æc', 'pafos'],
            '–ª–∞—Ä–Ω–∞–∫–∞': ['–ª–∞—Ä–Ω–∞–∫–∞', 'larnaca', '–ª–∞—Ä–Ωa–∫–∞', 'larnaka'],
            '–∞–π—è-–Ω–∞–ø–∞': ['–∞–π—è-–Ω–∞–ø–∞', 'ayia napa', '–∞–π—è –Ω–∞–ø–∞', 'agia napa', '–∞–π—è–Ω–∞–ø–∞'],
            '–Ω–∏–∫–æ—Å–∏—è': ['–Ω–∏–∫–æ—Å–∏—è', 'nicosia', '–Ω–∏–∫o—Å–∏—è', 'lefkosia'],
            '–ø—Ä–æ—Ç–∞—Ä–∞—Å': ['–ø—Ä–æ—Ç–∞—Ä–∞—Å', 'protaras', '–ø—Äo—Ç–∞—Ä–∞—Å'],
            '—Ñ–∞–º–∞–≥—É—Å—Ç–∞': ['—Ñ–∞–º–∞–≥—É—Å—Ç–∞', 'famagusta', '—Ñ–∞–º–∞–≥—É—Å—Ça']
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        location_variants = []
        for city, variants in city_mapping.items():
            if any(variant in location_input for variant in variants):
                location_variants.extend(variants)
                break
        
        if not location_variants:
            location_variants = [location_input]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
        location_conditions = []
        params = []
        
        for variant in location_variants:
            location_conditions.append("LOWER(location) LIKE ?")
            params.append(f"%{variant}%")
        
        location_clause = " OR ".join(location_conditions)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        query = f"""
        SELECT * FROM ads 
        WHERE ({location_clause})
        AND price > 0 AND price <= ?
        """
        params.append(budget)
        
        if rooms > 0:
            query += " AND rooms = ?"
            params.append(rooms)
        
        query += " ORDER BY price ASC"
        
        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.close()
        
        if not results:
            await update.message.reply_text(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {location_input}\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {budget} EUR\n"
                f"üõè –ö–æ–º–Ω–∞—Ç: {rooms if rooms > 0 else '–ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        context.user_data[RESULTS] = results
        context.user_data[PAGE] = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        location_lower = location_input.lower()
        is_big_city = any(city in location_lower for city in BIG_CITIES)
        
        if is_big_city and len(results) > ITEMS_PER_PAGE:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            await send_paginated_results(update, context, 0)
            return SEARCH_RESULTS
        else:
            # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ä–∞–∑—É
            await send_all_results(update, context, results)
            # –ö–†–ò–¢–ò–ß–ù–û: –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SEARCH_RESULTS –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫
            return SEARCH_RESULTS
            
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"An error occurred during DB search: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def send_paginated_results(update, context, page_num):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    try:
        all_results = context.user_data.get(RESULTS, [])
        if not all_results:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        total_results = len(all_results)
        
        start_idx = page_num * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, total_results)
        page_results = all_results[start_idx:end_idx]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if page_num == 0:
            location = context.user_data.get(LOC, '')
            budget = context.user_data.get(BUD, 0)
            rooms = context.user_data.get(RMS, 0)
            
            await update.message.reply_text(
                f"üéâ –ù–∞–π–¥–µ–Ω–æ {total_results} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n"
                f"üìç {location}\n"
                f"üí∞ –î–æ {budget} EUR\n"
                f"üõè {rooms if rooms > 0 else '–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'} –∫–æ–º–Ω–∞—Ç\n\n"
                f"–ü–æ–∫–∞–∑—ã–≤–∞—é {ITEMS_PER_PAGE} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3-5 –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        group_size = 5
        for i in range(0, len(page_results), group_size):
            group = page_results[i:i + group_size]
            msg_parts = []
            
            for idx, row in enumerate(group, start_idx + i + 1):
                link = f"https://t.me/kipr_arenda/{row['message_id']}"
                # –°–æ–∫—Ä–∞—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                location_short = str(row['location'])[:30] + ('...' if len(str(row['location'])) > 30 else '')
                msg_parts.append(f"{idx}. {location_short}\nüí∞ {row['price']} EUR | üõè {row['rooms']} –∫–æ–º–Ω.\n{link}")
            
            msg = "\n\n".join(msg_parts)
            
            try:
                await update.message.reply_text(msg, disable_web_page_preview=True)
                await asyncio.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except BadRequest as e:
                if "Text is too long" in str(e):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                    for idx, row in enumerate(group, start_idx + i + 1):
                        link = f"https://t.me/kipr_arenda/{row['message_id']}"
                        location_short = str(row['location'])[:30] + ('...' if len(str(row['location'])) > 30 else '')
                        short_msg = f"{idx}. {location_short}\nüí∞ {row['price']} EUR | üõè {row['rooms']} –∫–æ–º–Ω.\n{link}"
                        await update.message.reply_text(short_msg, disable_web_page_preview=True)
                        await asyncio.sleep(0.2)
                else:
                    raise e
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        if end_idx < total_results:
            # –ï—Å—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data=f"next_{page_num + 1}")])
        else:
            # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            await update.message.reply_text(
                f"‚ú® –≠—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n\n"
                f"üéØ –ü–æ–∫–∞–∑–∞–Ω–æ {total_results} –∏–∑ {total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                f"üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n"
                f"‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {context.user_data.get(LOC, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"‚Ä¢ –ë—é–¥–∂–µ—Ç: –¥–æ {context.user_data.get(BUD, 0)} EUR\n"
                f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: {context.user_data.get(RMS, 0) if context.user_data.get(RMS, 0) > 0 else '–ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'}\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
            )
        
        keyboard.extend([
            [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")],
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}, –ø–æ–∫–∞–∑–∞–Ω–æ {start_idx + 1}-{end_idx} –∏–∑ {total_results}"
        await update.message.reply_text(page_info, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in send_paginated_results: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

async def send_all_results(update, context, results):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤."""
    count = len(results)
    location = context.user_data.get(LOC, '')
    budget = context.user_data.get(BUD, 0)
    rooms = context.user_data.get(RMS, 0)
    
    await update.message.reply_text(
        f"üéâ –ù–∞–π–¥–µ–Ω–æ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {location}!\n"
        f"üí∞ –î–æ {budget} EUR | üõè {rooms if rooms > 0 else '–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'} –∫–æ–º–Ω–∞—Ç"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    group_size = 3
    for i in range(0, len(results), group_size):
        group = results[i:i + group_size]
        msg_parts = []
        
        for idx, row in enumerate(group, i + 1):
            link = f"https://t.me/kipr_arenda/{row['message_id']}"
            location_short = str(row['location'])[:35] + ('...' if len(str(row['location'])) > 35 else '')
            msg_parts.append(f"{idx}. {location_short}\nüí∞ {row['price']} EUR | üõè {row['rooms']} –∫–æ–º–Ω.\n{link}")
        
        msg = "\n\n".join(msg_parts)
        
        try:
            await update.message.reply_text(msg, disable_web_page_preview=True)
            await asyncio.sleep(0.3)
        except BadRequest as e:
            if "Text is too long" in str(e):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for idx, row in enumerate(group, i + 1):
                    link = f"https://t.me/kipr_arenda/{row['message_id']}"
                    location_short = str(row['location'])[:35] + ('...' if len(str(row['location'])) > 35 else '')
                    short_msg = f"{idx}. {location_short}\nüí∞ {row['price']} EUR | üõè {row['rooms']} –∫–æ–º–Ω.\n{link}"
                    await update.message.reply_text(short_msg, disable_web_page_preview=True)
                    await asyncio.sleep(0.2)
            else:
                raise e
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")],
        [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚ú® –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n"
        f"–í—Å–µ–≥–æ: {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        reply_markup=reply_markup
    )

async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles pagination button clicks."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("next_"):
        page_num = int(query.data.split("_")[1])
        context.user_data[PAGE] = page_num
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç update —Å message –≤–º–µ—Å—Ç–æ callback_query –¥–ª—è send_paginated_results
        class MockUpdate:
            def __init__(self, message):
                self.message = message
        
        mock_update = MockUpdate(query.message)
        await send_paginated_results(mock_update, context, page_num)
        return SEARCH_RESULTS
    elif query.data == "new_search":
        # Clear user data and start new search
        context.user_data.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text("üîç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!")
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        keyboard = [
            [InlineKeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞", callback_data='rent')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:',
            reply_markup=reply_markup
        )
        return DEAL_TYPE
    elif query.data == "end":
        # End conversation
        context.user_data.clear()
        
        try:
            await query.edit_message_text("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        except:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
        return ConversationHandler.END
    
    return SEARCH_RESULTS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text(
        'üëã –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    )
    return ConversationHandler.END

def main() -> None:
    """Run the bot."""
    application = Application.builder().token(TOKEN).build()

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DEAL_TYPE: [CallbackQueryHandler(deal_type)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rooms)],
            SEARCH_RESULTS: [CallbackQueryHandler(handle_pagination)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False,
    )

    application.add_handler(conv_handler)

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()